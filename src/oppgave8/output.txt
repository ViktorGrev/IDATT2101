Tekstsøk, Datakompresjon

Helge Hafting

Institutt for datateknologi og informatikk

Seksjon 1 ~0~8~




  • Frit~1~7~ i dokumenter, nettsider og lignende~115~23~atabaser~115~8~Søkemotor~199~14~ etter repeterte strenger~54~9~k~15~13~  • DNA-match~38~7~~110~9~
  Tekst: rabarbra     (lengde n)

  Søkeord: ~326~16~m~343~8~kyv søkeordet langs teksten, se om det pas~198~7~
    • tegn som~422~7~, vises med fet skrift~431~10~første feil med kursiv~431~10~dobbeltløkke for n-m posisjoner, og m tegn i~387~10~.~109~12~Hele greia, O\left(n\cdot m\right),\Omega~600~8~right)~113~8~Forsøk  | r  | a  | b~661~9~r~666~9~r  | a
----------+----+~704~10~-~705~20~---
    0   ~681~15~  |    |  ~773~10~  |~642~112~1~755~7~ ~758~33~~643~111~2~870~12~ ~706~28~~562~111~3~870~17~ ~547~23~~408~111~4~870~22~ ~388~18~~254~111~5~870~27~ ~152~17~~98~153~ ~204~47~ ~310~47~ ~416~47~ ~522~47~ ~628~53~
~1016~8~
  • Se på siste tegn i søketeksten først~980~8~Hvis det ikke passer, flytt~971~13~så langt vi kan~913~10~ ~46~42~    ~47~51~  0~512~44~  1~561~44~  2~562~44~  3~215~48~•~667~10~p~672~7~se på nestsiste osv.~566~20~Hvis tegn~607~8~fins~561~14~, kan vi flytte m steg~41~6~frem:~599~13~m  | e  | t~1014~9~o~36~9~i~999~9~t  | s~984~14~i  | n
~571~47~+~28~38~|~913~22~ ~246~28~ ~1~22~|~143~26~s~924~38~
~487~24~ ~929~50~~561~21~fins til venstre~91~7~ordet~556~16~ordet
    så~439~11~ med ~41~7~~3~7~Vi har vi en tabell for hvor mye~63~7~ flytte~350~8~I praksis~970~16~ele alfabetet, hvor de fleste tegn~40~6~gir et flytt på m. (Regel om «upassende tegn»)~231~8~Tabellen lager vi ved å pre-prosessere~273~12~~966~8~egn som~238~21~gir kortere flytt~252~10~– En «s» i siste posisjon gir~833~11~-1, fordi~643~12~  starter på «s»~32~8~\Omega\left(n/m\right) for~86~6~. Mye bedre!~25~87~,~797~12~hvis mismatch var på~785~7~tegn~721~14~~742~9~med~970~10~på nest~970~11~k~895~14~-1~893~7~~679~7~v~961~19~n~957~8~,~308~7~r vi m-2 steg osv.~612~10~ | m~1~9~t~91~9~o  | r~81~9~t~61~9~s~146~22~  -----+----+~1014~10~-~1004~20~-~984~32~
    0~868~14~n~30~9~ ~0~14~ ~1004~20~ ~984~7~
    1~969~19~m~934~48~~453~9~Vi trenger altså en todimensjonal~50~7~:~253~15~indeks er det ~96~14~et~210~10~Den andre~974~7~en er~203~9~e~436~25~Verdien i c~30~6~er hvor langt vi kan~307~8~fremover~228~18~For hv~910~11~ p~322~22~ ~982~8~t tegn x i alfabet~817~10~    let mot~54~6~ ~156~13~ fra p~979~12~hvis vi finner x etter i steg,~937~12~sett Tab[p][x] = i~952~20~i~35~7~ner x,~976~10~=p+1~771~16~~236~8~r~392~14~n~377~18~~268~47~~299~10~e~304~33~~329~15~e~254~28~
    2~229~14~e~204~23~~619~8~|~184~21~e~796~15~~269~7~0,1: Når siste~486~10~treffer «n», kan vi bare~410~8~ett~50~6~steg~192~8~2: Feil i før~945~12~~208~11~Regel om «~215~14~» lar oss~920~16~ hakk~93~8~R~962~9~p~154~8~endelse~960~10~flytte to hakk her~31~8~«ne» passet, og «ene» overlapper med seg selv~733~8~Vi slår opp både~839~18~og ~882~17~, og~8~6~bruker regelen som gir det lengste hoppet.~77~18~• Tab~12~6~for~779~19~~678~11~index er hvor mange~65~6~som~778~7~~633~9~verdien i cellen~968~9~langt vi kan~530~7~~467~7~Lages ved å prøve ut om~9~13~o~691~26~~510~7~ofte gjør den~57~6~d~623~7~vi får lange hopp!~750~18~H~0~7~søker etter «aaa» i «aaaaaa…», har vi dessverre O\left(n\cdot m\right)~357~12~søkeordet passer overalt, de samme a-ene sjekkes flere~134~8~gang~405~10~Galil fant en måte å unngå unødvendig~938~7~nligninger:~216~10~Når vi~144~7~r~868~11~kortere enn den delen av~833~10~~878~7~vi allerede har~841~7~t, trenger vi ikk~816~8~ ~965~11~o~236~8~nde området omigjen.~51~10~Kort~84~7~ skjer fordi~694~11~delvis matcher~163~9~.~714~8~Hvis det ikke hadde~94~9~hadde~763~10~t lenger~216~7~    T~394~7~    | .  | .~1014~9~O  | l  | a~1014~10~ ~984~10~|  . |~91~6~Mismatch O/a  |    |  ~959~24~l~939~9~   |~980~9~
    Nytt forsøk~954~10~ ~939~41~|~949~7~~139~7~Programmet~585~9~i~588~13~n oransje regionen~599~8~~72~7~Dermed:~254~10~right) og \Omega~230~7~/~235~8~ for~82~6~tekstsøk~121~14~
  • Boyer og Moore sin artikkel:~16~10~http://www.cs.utexas.edu/~moore/publications/fstrpos.pdf~17~8~Wikipedia~940~15~s://en.w~993~8~.org/wiki/Boyer_moore_string_search_algorithm~90~8~Animasjon (Fyll ut, og velg Boyer-Moore)     T~202~7~java~800~24~pitt.edu/~kirk/cs1501/anim~798~7~String.html~609~10~monstrasjon på~688~11~nettside~688~7~h~692~24~users/moore/best-ideas/string-searching~672~8~-example~889~9~Seksjon 2 Mer om datakompresjon~520~14~Enkleste form for~978~19~  • En serie repetisjoner erstattes med et antall:~45~8~– ABIIIIIIIIIIIIBBBCDEFFFGH \rightarrow AB12I3BCDE3FGH~360~12~I praksis litt mer komplisert~921~10~det kan jo være sifre i det vi komprimerer~869~10~ser vanligvis på «bytes», ikke «tekst»~821~10~må kunne skille mell~674~7~ og metadat~434~7~
  • Eks., bruker negativ byte for u~873~9~te sekvenser~707~48~
      [-2]AB[12]I[3]B[-3]CDE[3]F[-2]GH~620~10~25 byte ble redusert til 16~485~12~Kan ikke~706~11~ ABABABABABAB…~438~10~~432~9~Leser gjennom fila~566~9~nput kopieres til outpu~570~7~• Hvis en lang nok~749~8~ kommer omigjen~193~7~    – dropp den, skriv heller en referanse~917~17~  – format: repeter X tegn, som vi har sett Y tegn tidligere~851~9~jelper hvis~580~9~n er lenger enn en slik~885~10~~138~7~Søker bakover i et sirkulært buff~344~8~• Output kan~314~11~s videre med Huffman-koding~619~20~Må være kompakt~703~12~ellers kan vi ikke referere til korte streng~195~12~f.eks. 2–3 byt~745~9~Å «se» langt~800~11~datastrømmen, gir større sjanse for å~52~6~finne repetisjoner.~527~12~men også~665~8~kjøretid~41~10~påvirker~541~7~et på~499~10~ne våre~444~10~  ∗ 1 byte kan peke 255 tegn~606~8~~980~11~2~980~15~65 536~977~25~3~933~15~16 777 21~926~20~• I blant~624~13~k~129~9~~262~11~Må derfor også ha en måte å si:~18~10~Her~190~8~X~8~5~s u~46~9~te dat~92~7~  – Slik informasjon ta~926~7~plass!~12~20~Vurdering~101~13~Skal dette være en del av en~513~8~u~887~10~ blokk?~37~10~Evt.~221~8~-ref + header for korte~958~20~~95~7~Det vi~204~11~r må alts~243~7~l~88~10~samlet lengde~377~7~or~818~13~e~499~9~-~50~15~  –~871~12~en~876~26~V~880~14~ikke svært~153~15~, det hjelp~985~7~!~41~20~Eksempeltekst~644~11~Problemer, p~1013~8~. Alltid~1006~10~!
Dette er dagens~978~8~.~958~9~t er
å~381~11~ ~942~7~atisk tekst.~880~21~ med avstande~692~12~P~866~9~^{10}~861~10~^{20}~856~10~^{30}~851~11~^{40}~846~10~^{50}~841~10~^{60}~836~10~^{70}~831~11~^{80}~183~10~^{9~902~10~at^{100}~815~10~^{110}~108~8~110 tegn, inkludert linjeskift og blanke.~604~33~ ~748~201~K~72~9~:~12~10~[12]~388~12~[-11,8][8]~386~8~[-18,10][17]~384~18~[-27,7][2]. [-65,8][17]~379~18~[-35,8][12]~376~20~Før~8~10~ing,~573~9~.~118~8~Med 1 byte per tallkode, 84~983~10~~4~5~Vi sparte 110-84=26~497~7~eller 23%~32~8~se også Lz-demo~76~20~For hver tegnposisjon i input, må vi søke etter lengste match~33~6~i buffere~782~11~il med n~343~7~sirkulært~981~7~ med størrelse m~77~9~Teste alle ~883~8~er, i verste fall O\left(nm^{2}\right)~12~8~I praksis går det bedre, særlig hvis data varierer en del~438~9~an bruke Boyer-Moore tekstsøk for bedre kjøretid~153~21~Lempel og Ziv sin artikkel~154~7~
http://www.cs.duke.edu/courses/spring03/cps296.5/papers/ziv_lempel_1977_universal_algorithm.pdf~15~8~Wikipedia~33~11~https://en.w~993~8~.org/wiki/Lempel\%E2\%80\%93Ziv~795~21~Z leser~467~8~og skriver~126~8~– bakover-referans~996~12~sekvens~497~7~u~5~9~te tegn~36~8~u~999~16~ telles opp, og~119~11~s videre med
    Huffmannkoding~597~21~igner LZ. Teoretisk samme~30~6~esjon. Lettere å speede opp~30~9~Leser ett og ett~832~13~Bygger en ordliste (dictionary) underveis~714~10~til å begynne med, alle 1-byte «ord»~148~10~nn et (lengst mulig) ord, skriv ordnummeret (med færrest~65~6~mulig bits!~186~7~  – lagre nytt «ord» = dette ordet + nes~600~15~K~722~9~ hvis ordene blir lengre enn numrene~443~10~W+~603~7~ ~52~6~arrowDeflate (brukt i zip)~158~12~Se eksempel «lzw»~350~22~W~813~11~e~340~10~~351~10~y~610~8~d~620~9~,~348~11~kriver «ordnumre~648~9~Noen~740~7~forekommer ofte~791~7~andr~793~9~Programmet finner antall (fr~249~8~) for ulike~588~7~re~885~19~Huffmankoder i stedet for~971~9~~129~9~ord som~862~16~, får kortere kod~77~6~~31~15~K~167~9~r mer enn LZ-algoritm~570~9~1. run-length c~149~9~  2. Burrows-Wheeler transformasjon (hoveddel~387~7~3. Move-To-Front~976~17~MFT~344~7~4~905~19~ igje~133~7~5.~1~35~H~897~7~en av BZ2 (blokksorteringen~233~7~• Dette steget k~739~11~ikke selv, men~797~10~er~7~5~
    blokk (typisk 900kB~934~9~T~974~13~repeterte s~484~8~ (som ord) til~990~10~
   ~121~13~R~963~9~tegn er lettere å~844~11~ videre!~895~17~asjonen er reversibel (for de~780~9~ing~114~9~~106~11~BWT på~5~5~t «referererΩ». Tegnet «Ω» markerer slutt~593~8~•
  Rotasjoner     Sortert
  --------~1016~8~-~1007~11~
    ~913~10~    ~900~9~r~21~6~Ω~882~9~    ~996~8~ef~964~7~Ω~851~8~ ~994~7~Ωrefe~964~7~e~993~9~ ~1010~13~~904~7~r~931~7~    ~905~9~e~964~8~e~931~7~ ~860~13~~964~8~erΩrefe~1010~14~~964~9~erΩref~920~14~
~918~14~ ~830~13~
~768~14~ ~770~13~~595~13~er siste kolonne med tegn fra sortert liste, «rfrreΩeeer»~192~8~Nå har vi mange lik~390~7~ved siden av hverandre,~25~6~  –~360~22~med~42~18~~972~9~Se også bw brukt på diverse fil~801~8~~28~14~vordan gå fra~825~13~ til~343~10~Ω»?~20~8~Vet at~980~14~e~723~16~i~734~14~~50~7~Lista bestod av ulike r~293~10~av samme ord~752~10~all~632~9~r inneholder de~977~7~tegnen~920~15~var~599~8~~676~9~før~554~13~å altså ha~946~17~,~962~18~altså «eeeefrrrrΩ~529~9~Vi har nå to~852~9~, i ei liste over~788~11~~529~9~kan rotere sidelengs, så~383~15~blir~833~7~, og~37~6~ ~815~8~blir andr~659~7~  – dette er fortsatt en del av løsningen~393~10~sorterer vi dette,~318~8~de to~709~15~n~919~11~så kan vi legge p~836~16~igj~918~12~v~723~10~r~550~10~. Repeter til~988~8~alle!~103~8~Riktig rad er den som har «Ω»~906~10~plass~272~72~Legg til sisteRotere mot høyreSorte~652~9~re ef fe er re er re er rΩ~529~8~f~996~19~ Ωr ref~956~11~r~996~15~ ef f~461~9~r~996~19~ er r~427~9~e~891~22~ Ω~482~9~Ω~965~16~ ~845~8~Ω \Longleftarrow D~937~10~r~866~24~e~990~17~Ω~866~15~e~956~11~Ω~897~21~e~699~8~Ω~866~24~r~556~16~~16~7~Komprimerer ikke data, men forbered~143~8~• Initialiserer en tabell med alle byte-verdier. t[0]=0,~83~6~t[1]=1, t[2]=2, …~474~10~ser ett og ett tegn fra input~19~10~finn tegnet i~901~7~en, skriv index til out~968~14~ly~938~7~et vi fant til~0~8~plass~942~11~ (move to~34~6~  front)~182~8~input: caaaaacbbbbbabababab~41~8~  inn:~990~30~ ut:21000012000021111111~21~6~tabell~944~10~0: aca....cb....~910~18~1: bac....ac....~875~8~~876~9~2: cbb....ba....c.......~842~10~3: ddd....dd....d~990~13~• Alle repeterte tegn blir til null~469~10~Kort~980~9~ende sekvenser blir små ta~796~8~• Lett å gå andre veien ved utpakking~320~20~Eksempe~725~11~i~645~15~bbaaaab~645~27~00200010~232~11~
    Frekv. før    |  |~1002~11~etter
  --------~1016~8~--+--+~1002~18~--
    a~511~7~ 9  ~936~10~0~1002~8~14
    b~985~21~1~963~8~ 3
    c~946~8~2~946~12~2~985~12~~20~7~Før: like mange «a» som «b»~689~9~tter: overvekt av «0», som kan få kortere kode.~621~20~Burrows-Wheeler sorterer så vi får~896~7~repetisjon~456~8~  – 900 kB blokkstørrelse~131~8~Move-to-front gjør ulik~948~14~ om~366~19~Deretter fungerer run-length coding veldig bra!~17~8~Huffmannkoding av det som blir igjen~359~20~Huffma~969~11~ei fil, bruker samme ~938~7~for hele fil~78~7~• Ei fil kan bestå av~787~7~deler (f.eks. norsk+engelsk)~695~10~U~980~11~har ulik bokstavfordel~172~7~    – De komprimeres best med~672~7~Huffman-træ~28~9~Adaptiv~969~10~ing ser når fr~16~7~ne endrer seg, og lager~81~6~nytt h~669~7~tre~29~20~Kan~870~11~ bedre enn~613~9~~597~15~ ~669~7~faste koder, aldri min~962~8~1 bit~538~9~vis sjansen for et symbol er 50%, vil begge kode det med 1~82~7~i~948~39~90%:~275~10~Huffman: fremdeles~872~12~  – Aritmetisk~467~7~: 0,~836~9~~132~15~Noen forskere mener datakompresjon og AI ~382~9~problem~911~11~I: det~24~6~ste programm~265~7~oppfø~561~7~ intelligen~693~9~Å oppda~32~8~erte mønstre (kan nyttes for ~873~10~)~1~6~krever~937~11~s~6~9~e~1001~13~ gir~501~7~k~804~9~~21~9~simalene i \pi er et vanskelig datasett å~268~11~. (mye
    variasjon) Men~591~11~vi kjenner rekkeutviklinger som genererer \pi.~115~10~Et~696~8~ med endelig lengde, kan~965~9~ hele rekka. \infty~45~6~  ~719~11~!~122~8~Ei zipfil er~797~11~å~50~11~, selv om det fins bedr~788~7~k~484~10~enn zip~352~11~vis vi pakker ut~916~7~a, kan vi~102~18~med bz2~284~10~Å~495~9~at noe er zip-~44~9~t, og dermed kan behandles~776~8~slik,~483~19~…
